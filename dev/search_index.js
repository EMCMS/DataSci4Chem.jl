var documenterSearchIndex = {"docs":
[{"location":"vis/#Data-visualization-and-plotting","page":"Data visualization","title":"Data visualization and plotting","text":"","category":"section"},{"location":"vis/","page":"Data visualization","title":"Data visualization","text":"Here we will explore basics of the data visualization from simple plots to model representations. The content of this section is mainly based on the Plots.jl package. You should be able to generate all the figures in this tutorial using the DataSci4Chem.jl package. For functions that are not exported directly, you can use DataSci4Chem.fun(-). ","category":"page"},{"location":"vis/#Simple-line-plot","page":"Data visualization","title":"Simple line plot","text":"","category":"section"},{"location":"vis/","page":"Data visualization","title":"Data visualization","text":"If you have one single variable as a vector of numbers, you can use simple line plot (plot). ","category":"page"},{"location":"vis/","page":"Data visualization","title":"Data visualization","text":"using DataSci4Chem\n\n# Generating the data\n\ny = collect(1:0.1:10)\n\n# Plotting the data\n\nDataSci4Chem.plot(y)\n","category":"page"},{"location":"vis/","page":"Data visualization","title":"Data visualization","text":"Here we stored our vector of 100 entries between 0 and 10 in variable y. The \"x axis\" here represents the index of each value while the \"y axis\" is the assigned value of the y at each index. For example, if we multiply the y by a number (e.g. 5), the \"x axis\" will not change while the \"y axis\" will be adjusted. ","category":"page"},{"location":"vis/","page":"Data visualization","title":"Data visualization","text":"using DataSci4Chem\n\ny1 = 5 .* y\n\n# Plotting the data\n\nDataSci4Chem.plot(y1)\n","category":"page"},{"location":"vis/","page":"Data visualization","title":"Data visualization","text":"In this case the julia plotting backend is actually evaluating the below command to generate this figure. ","category":"page"},{"location":"vis/","page":"Data visualization","title":"Data visualization","text":"using DataSci4Chem\n\ny1 = 5 .* y\n\n# Plotting the data\n\nDataSci4Chem.plot(1:length(y1),y1)\n","category":"page"},{"location":"vis/","page":"Data visualization","title":"Data visualization","text":"The first entry in the plot(-) is replaced with a vector of indices from 1 to the length of the y. This implies that we generally need two variables of the same size to be able to use line plot. In case we have a x vector the above plot will be changed to the following. ","category":"page"},{"location":"vis/","page":"Data visualization","title":"Data visualization","text":"using DataSci4Chem\n\n\nx = sin.(y)\n\n# Plotting the data\n\nDataSci4Chem.plot(x,y)\n","category":"page"},{"location":"vis/","page":"Data visualization","title":"Data visualization","text":"The x values in this plot are the sin(y) while the y values remain the same. ","category":"page"},{"location":"vis/#Frame","page":"Data visualization","title":"Frame","text":"","category":"section"},{"location":"vis/","page":"Data visualization","title":"Data visualization","text":"You can adjust different parameters associated with the plot axis such as axis labels and range. For doing so you can either modify an existing frame or set these parameters as attributes of plot(-). ","category":"page"},{"location":"vis/#Axis-label","page":"Data visualization","title":"Axis label","text":"","category":"section"},{"location":"vis/","page":"Data visualization","title":"Data visualization","text":"Below you can see how the labels on the x and y axis are set via frame modification. ","category":"page"},{"location":"vis/","page":"Data visualization","title":"Data visualization","text":"using DataSci4Chem\n\n\nDataSci4Chem.plot(x,y)\nDataSci4Chem.xlabel!(\"sin(y)\")              # setting the label of x axis \nDataSci4Chem.ylabel!(\"y values\")            # setting the label of the y axis\n","category":"page"},{"location":"vis/","page":"Data visualization","title":"Data visualization","text":"You can also set these parameters directly in the plot(-) function. ","category":"page"},{"location":"vis/","page":"Data visualization","title":"Data visualization","text":"using DataSci4Chem\n\n\nDataSci4Chem.plot(x,y,xlabel=\"sin(y)\",ylabel=\"y values\")\n","category":"page"},{"location":"vis/","page":"Data visualization","title":"Data visualization","text":"These ways of setting axis labels can be used for any type of plot type as long as the generic \"GR\" backend is used. These approaches are not completely mapped for all the backends, particularly for PlotlyJS.  ","category":"page"},{"location":"vis/#Axis-limit","page":"Data visualization","title":"Axis limit","text":"","category":"section"},{"location":"vis/","page":"Data visualization","title":"Data visualization","text":"You can also set the range of each axis using the function lims!(-). This function must be adjusted for \"x axis\" vs \"y axis\". In other words for \"x axis\" it will become xlims!(-) while for the \"y axis\" it will be ylims!(-). ","category":"page"},{"location":"vis/","page":"Data visualization","title":"Data visualization","text":"using DataSci4Chem\n\n\nDataSci4Chem.plot(x,y,xlabel=\"sin(y)\",ylabel=\"y values\")\nDataSci4Chem.xlims!(-2,2)                               # Setting the limits of x\nDataSci4Chem.ylims!(3,6)                                # Setting the limits of y\n","category":"page"},{"location":"vis/","page":"Data visualization","title":"Data visualization","text":"Similar to the axis label, the same concept can be applied to any plot frame generated via Plots.jl. ","category":"page"},{"location":"vis/#Label/legend","page":"Data visualization","title":"Label/legend","text":"","category":"section"},{"location":"vis/","page":"Data visualization","title":"Data visualization","text":"When plotting multiple series or overlaying multiple frames, it is important to label each series accordingly. To do that we need to modify an attribute of the plot(-) called \"label\". If this parameter is not set, the series label is selected automatically to \"y1\". If you want to change this, you need to provide an input to the attribute \"label\" while plotting your data. ","category":"page"},{"location":"vis/","page":"Data visualization","title":"Data visualization","text":"using DataSci4Chem\n\n\nDataSci4Chem.plot(x,y,xlabel=\"sin(y)\",ylabel=\"y values\",label = \"Example data\")\n","category":"page"},{"location":"vis/","page":"Data visualization","title":"Data visualization","text":"In case you want to remove the label of a data series, you can set the attribute label to false, which will result in the removal of the legend completely. ","category":"page"},{"location":"vis/","page":"Data visualization","title":"Data visualization","text":"using DataSci4Chem\n\n\nDataSci4Chem.plot(x,y,xlabel=\"sin(y)\",ylabel=\"y values\",label = false)\n","category":"page"},{"location":"vis/#The-line-settings","page":"Data visualization","title":"The line settings","text":"","category":"section"},{"location":"vis/","page":"Data visualization","title":"Data visualization","text":"When plotting our data being able to adjust parameters associated with the line is very important. This becomes particularly important for the multivariate data. As a start we can change the line style with the keyword \"linestyle\", that is fed directly to the plot function. ","category":"page"},{"location":"vis/","page":"Data visualization","title":"Data visualization","text":"using DataSci4Chem\n\n\nDataSci4Chem.plot(x,y,xlabel=\"sin(y)\",ylabel=\"y values\",label = false,linestyle=:dash)\n","category":"page"},{"location":"vis/","page":"Data visualization","title":"Data visualization","text":"A shortcut to the \"linestyle\" parameter is \"ls\". In other words, you will get the same outcome replacing \"linestyle\" with \"ls\" in the above example. The GR backend in Plots.jl package has several builtin options for the line style. ","category":"page"},{"location":"vis/","page":"Data visualization","title":"Data visualization","text":"note: Note\nThe plotting backend in julia keeps the same the line style for all the plots unless it is specified. You need to set this parameter for each frame separately. ","category":"page"},{"location":"vis/","page":"Data visualization","title":"Data visualization","text":"Another line setting to be adjusted is the line width, which helps with the visibility of the lines in your plot. The keyword for line width setting is \"linewidth\" or \"lw\". The parameter must be a real and positive number. For example by setting the \"lw\" to 2 for the above plot we can increase the visibility of our data. ","category":"page"},{"location":"vis/","page":"Data visualization","title":"Data visualization","text":"using DataSci4Chem\n\n\nDataSci4Chem.plot(x,y,xlabel=\"sin(y)\",ylabel=\"y values\",label = false,linestyle=:dash,lw=2)\n","category":"page"},{"location":"vis/","page":"Data visualization","title":"Data visualization","text":"For most figures, we also want to set the color of the lines in the plot, particularly when multiple lines are plotted. The parameter to be adjusted here is \"linecolor\" or \"lc\". The julia plotting backend, usually, sets a different color to each line in your plot. However, it is useful to be able to set these colors as it fits your needs. There several colors builtin the plots.jl and can be used without further definition. You can also set these colors manually via RGB cods. ","category":"page"},{"location":"vis/","page":"Data visualization","title":"Data visualization","text":"using DataSci4Chem\n\n\nDataSci4Chem.plot(x,y,xlabel=\"sin(y)\",ylabel=\"y values\",label = false,\nlinestyle=:dash,lw=2,lc=:red)\n","category":"page"},{"location":"vis/","page":"Data visualization","title":"Data visualization","text":"warning: Warning\nThere are other parameters that can be set related to the line style settings, which have not been discussed here. For a comprehensive list please refer to the \"Series Attributes\" page in Plots.jl documentation.   ","category":"page"},{"location":"vis/#Multiple-frames","page":"Data visualization","title":"Multiple frames","text":"","category":"section"},{"location":"vis/","page":"Data visualization","title":"Data visualization","text":"To plot multiple data series, there are two different options. These options are 1) using multivariate X and Y matrices or 2) overlay different frames on top of each other. ","category":"page"},{"location":"vis/#Multivariate-data-plotting","page":"Data visualization","title":"Multivariate data plotting","text":"","category":"section"},{"location":"vis/","page":"Data visualization","title":"Data visualization","text":"When providing multivariate matrices, julia treats each column in your data as a separate variable. This implies that for an X_2 times 10, two series are plotted. ","category":"page"},{"location":"vis/","page":"Data visualization","title":"Data visualization","text":"using DataSci4Chem\n\nx_m = hcat(x,x)\ny_m = hcat(y,y .+ 5)\n\nDataSci4Chem.plot(x_m,y_m,xlabel=\"sin(y)\",ylabel=\"y values\")\n","category":"page"},{"location":"vis/","page":"Data visualization","title":"Data visualization","text":"In this case to add the legend to this plot you need to provide a vector of labels to the plot(-) function. The same goes for all the line setting attributes. ","category":"page"},{"location":"vis/","page":"Data visualization","title":"Data visualization","text":"using DataSci4Chem\n\nx_m = hcat(x,x)\ny_m = hcat(y,y .+ 5)\n\nDataSci4Chem.plot(x_m,y_m,xlabel=\"sin(y)\",ylabel=\"y values\",label=[\"column 1\" \"column 2\"])\n","category":"page"},{"location":"vis/","page":"Data visualization","title":"Data visualization","text":"warning: Warning\nPlease note that the entries in the label vector are space separated. Otherwise, the backend will not be able to separate different entries from each other. ","category":"page"},{"location":"vis/","page":"Data visualization","title":"Data visualization","text":"using DataSci4Chem\n\nx_m = hcat(x,x)\ny_m = hcat(y,y .+ 5)\n\nDataSci4Chem.plot(x_m,y_m,xlabel=\"sin(y)\",ylabel=\"y values\",label=[\"column 1\" \"column 2\"],\nlc = [:red :green], lw = [2 1], ls = [:dot :dash])\n","category":"page"},{"location":"vis/#Overlying-frames","page":"Data visualization","title":"Overlying frames","text":"","category":"section"},{"location":"vis/","page":"Data visualization","title":"Data visualization","text":"Another option for plotting multivariate data is the use of overlying frames. For this you need to use the function plot!(-), which modifies the last in memory frame. To use this approach, you first plot your first variable and then overlay the additional variables on top of the already existing frame. ","category":"page"},{"location":"vis/","page":"Data visualization","title":"Data visualization","text":"using DataSci4Chem\n\nx_m = hcat(x,x)\ny_m = hcat(y,y .+ 5)\n\nDataSci4Chem.plot(x_m[:,1],y_m[:,1],xlabel=\"sin(y)\",ylabel=\"y values\",label=\"column 1\")\nDataSci4Chem.plot!(x_m[:,2],y_m[:,2],xlabel=\"sin(y)\",ylabel=\"y values\",label=\"column 2\")\n\n","category":"page"},{"location":"vis/","page":"Data visualization","title":"Data visualization","text":"warning: Warning\nThe variable ranges, unless set, will take the values relevant to the largest frame. The labels must be set for each series separately to make sure proper display of the plots.","category":"page"},{"location":"vis/","page":"Data visualization","title":"Data visualization","text":"For setting the line attributes, you will have to set them up for each frame separately. Otherwise, julia will use the default settings. ","category":"page"},{"location":"vis/","page":"Data visualization","title":"Data visualization","text":"using DataSci4Chem\n\nx_m = hcat(x,x)\ny_m = hcat(y,y .+ 5)\n\nDataSci4Chem.plot(x_m[:,1],y_m[:,1],xlabel=\"sin(y)\",ylabel=\"y values\",label=\"column 1\",lw=2,ls=:dot,lc=:red)\nDataSci4Chem.plot!(x_m[:,2],y_m[:,2],xlabel=\"sin(y)\",ylabel=\"y values\",label=\"column 2\",lw=1,ls=:dash)\n\n","category":"page"},{"location":"vis/","page":"Data visualization","title":"Data visualization","text":"For example, for the above plot in the second frame we do not set the \"lc\" parameter and as a consequence julia uses the default color sequence for the second line. ","category":"page"},{"location":"vis/","page":"Data visualization","title":"Data visualization","text":"Another way to overlay the frames on top of each other is to store the frame information into a variable that can be retrieved and/or modified. For example, in the below case we are storing all the info of the first frame into variable \"p\". ","category":"page"},{"location":"vis/","page":"Data visualization","title":"Data visualization","text":"using DataSci4Chem\n\nx_m = hcat(x,x)\ny_m = hcat(y,y .+ 5)\n\np = DataSci4Chem.plot(x_m[:,1],y_m[:,1],xlabel=\"sin(y)\",ylabel=\"y values\",label=\"column 1\",lw=2,ls=:dot,lc=:red)\n","category":"page"},{"location":"vis/","page":"Data visualization","title":"Data visualization","text":"In the next step, one can modify this frame using the function plot!(-) by defining the first variable as the previous frame. ","category":"page"},{"location":"vis/","page":"Data visualization","title":"Data visualization","text":"using DataSci4Chem\n\n\nDataSci4Chem.plot!(p,x_m[:,2],y_m[:,2],xlabel=\"sin(y)\",\nylabel=\"y values\",label=\"column 2\",lw=1,ls=:dash)\n","category":"page"},{"location":"vis/","page":"Data visualization","title":"Data visualization","text":"tip: Tip\nThe same strategy can be used for updating the attributes of the plot.","category":"page"},{"location":"vis/#Plot-types","page":"Data visualization","title":"Plot types","text":"","category":"section"},{"location":"vis/","page":"Data visualization","title":"Data visualization","text":"There are several plot types implemented within the Plots.jl and accessible via DataSci4Chem.jl. Here we will discuss the most commonly used plot types. ","category":"page"},{"location":"vis/#Scatter","page":"Data visualization","title":"Scatter","text":"","category":"section"},{"location":"vis/","page":"Data visualization","title":"Data visualization","text":"Scatter plots next to the line plots are one of the most commonly used plotting approaches. Similar to line plots, the inputs of scatter(-) are the matrics X and Y with the same size. ","category":"page"},{"location":"vis/","page":"Data visualization","title":"Data visualization","text":"using DataSci4Chem\n\nx_m = hcat(x,x)\ny_m = hcat(y,y .+ 5)\n\nDataSci4Chem.scatter(x_m,y_m,xlabel=\"sin(y)\",ylabel=\"y values\",label=[\"column 1\" \"column 2\"])\n","category":"page"},{"location":"vis/","page":"Data visualization","title":"Data visualization","text":"tip: Tip\nAll the frame and axis related commands that work for line plots are applicable to scatter plots too.","category":"page"},{"location":"vis/","page":"Data visualization","title":"Data visualization","text":"using DataSci4Chem\n\n\nDataSci4Chem.scatter(x_m[:,1],y_m[:,1],xlabel=\"sin(y)\",ylabel=\"y values\",label=\"column 1\",lw=2,ls=:dot,lc=:red)\nDataSci4Chem.scatter!(x_m[:,2],y_m[:,2],xlabel=\"sin(y)\",ylabel=\"y values\",label=\"column 2\",lw=1,ls=:dash)\n\n","category":"page"},{"location":"vis/","page":"Data visualization","title":"Data visualization","text":"warning: Warning\nThe scatter plot ignores the parameters specific to line plots or other plot types (e.g. \"ls\"). For example, \"lc\", \"ls\", and \"lw\" parameters associated with line plots are skipped and the backend uses the default values for the scatter plot equivalent attribute. ","category":"page"},{"location":"vis/","page":"Data visualization","title":"Data visualization","text":"There are a few highly relevant attributes specific to scatter plots that will be discussed here. ","category":"page"},{"location":"vis/#Marker-properties","page":"Data visualization","title":"Marker properties","text":"","category":"section"},{"location":"vis/","page":"Data visualization","title":"Data visualization","text":"You can set both marker size, shape, color, and opacity for your scatter plots. These parameters will help readability of your figures and their interpretation. ","category":"page"},{"location":"vis/","page":"Data visualization","title":"Data visualization","text":"The default marker size is 4 and can be changed by resetting either \"markersize\" or \"ms\". For the \"ms\" please make sure to use a positive and real number. ","category":"page"},{"location":"vis/","page":"Data visualization","title":"Data visualization","text":"using DataSci4Chem\n\n\nDataSci4Chem.scatter(x_m[:,1],y_m[:,1],xlabel=\"sin(y)\",ylabel=\"y values\",label=\"column 1\",ms=5)\nDataSci4Chem.scatter!(x_m[:,2],y_m[:,2],xlabel=\"sin(y)\",ylabel=\"y values\",label=\"column 2\",ms=2)\n\n","category":"page"},{"location":"vis/","page":"Data visualization","title":"Data visualization","text":"You can also feed a vector of the size of \"Y\" to your marker size attribute. This will enable to plot higher dimensional data in a 2D plot. ","category":"page"},{"location":"vis/","page":"Data visualization","title":"Data visualization","text":"using DataSci4Chem\n\nms1 = range(1, stop=10, length=size(y_m,1))\n\nDataSci4Chem.scatter(x_m[:,1],y_m[:,1],xlabel=\"sin(y)\",ylabel=\"y values\",label=\"column 1\",ms=ms1)\nDataSci4Chem.scatter!(x_m[:,2],y_m[:,2],xlabel=\"sin(y)\",ylabel=\"y values\",label=\"column 2\",ms=2)\n\n","category":"page"},{"location":"vis/","page":"Data visualization","title":"Data visualization","text":"Another highly relevant scatter plot attribute is the marker shape, which is by default \"circle\" and can be changed using either \"markershape\" or \"shape\". For example if want to change the marker shape of column 2 in the above plot we can do this by doing the following. ","category":"page"},{"location":"vis/","page":"Data visualization","title":"Data visualization","text":"using DataSci4Chem\n\nms1 = range(1, stop=10, length=size(y_m,1))\n\nDataSci4Chem.scatter(x_m[:,1],y_m[:,1],xlabel=\"sin(y)\",ylabel=\"y values\"\n,label=\"column 1\",ms=ms1)\n\nDataSci4Chem.scatter!(x_m[:,2],y_m[:,2],xlabel=\"sin(y)\",ylabel=\"y values\"\n,label=\"column 2\",ms=2,shape=:+)\n\n","category":"page"},{"location":"vis/","page":"Data visualization","title":"Data visualization","text":"The marker color is the equivalent of \"lc\" attribute for the line plots. Similar to the \"lc\" you have access to the same color schemes via either \"markercolor\" or \"mc\".","category":"page"},{"location":"vis/","page":"Data visualization","title":"Data visualization","text":"using DataSci4Chem\n\nms1 = range(1, stop=10, length=size(y_m,1))\n\nDataSci4Chem.scatter(x_m[:,1],y_m[:,1],xlabel=\"sin(y)\",ylabel=\"y values\"\n,label=\"column 1\",ms=ms1)\n\nDataSci4Chem.scatter!(x_m[:,2],y_m[:,2],xlabel=\"sin(y)\",ylabel=\"y values\"\n,label=\"column 2\",ms=2,shape=:+,mc=:black)\n\n","category":"page"},{"location":"vis/","page":"Data visualization","title":"Data visualization","text":"The last scatter plot specific attribute discussed here is the marker opacity which is defined by \"markerapha\" or \"ma\". This attribute is very helpful with multiple frames' plots where a large amount of data is plotted. ","category":"page"},{"location":"vis/","page":"Data visualization","title":"Data visualization","text":"using DataSci4Chem\n\nms1 = range(1, stop=10, length=size(y_m,1))\n\nDataSci4Chem.scatter(x_m[:,1],y_m[:,1],xlabel=\"sin(y)\",ylabel=\"y values\"\n,label=\"column 1\",ms=ms1,ma=0.5)\n\nDataSci4Chem.scatter!(x_m[:,2],y_m[:,2],xlabel=\"sin(y)\",ylabel=\"y values\"\n,label=\"column 2\",ms=3,shape=:+,mc=:black)\n\n","category":"page"},{"location":"vis/#Bar","page":"Data visualization","title":"Bar","text":"","category":"section"},{"location":"vis/","page":"Data visualization","title":"Data visualization","text":"Another commonly used plotting style is bar plots. They are an easy way to get a quick overview of your data, particularly when your independent variable is discreet. However, care needs to be taken when scaling the data to avoid misleading conclusions. For example here we will plot the first 10 values of or first column. ","category":"page"},{"location":"vis/","page":"Data visualization","title":"Data visualization","text":"using DataSci4Chem\n\n\nDataSci4Chem.bar(x_m[:,1][1:10],y_m[:,1][1:10],label=\"column 1 - first 10\")\n\n","category":"page"},{"location":"vis/","page":"Data visualization","title":"Data visualization","text":"Similar to the previous plot types we can add more frames to the existing figure to represent multiple data series. ","category":"page"},{"location":"vis/","page":"Data visualization","title":"Data visualization","text":"using DataSci4Chem\n\nmeasles = [38556, 24472, 14556, 18060, 19549, 8122, 28541, 7880, 3283, 4135, 7953, 1884]\nmumps = [20178, 23536, 34561, 37395, 36072, 32237, 18597, 9408, 6005, 6268, 8963, 13882]\nchickenPox = [37140, 32169, 37533, 39103, 33244, 23269, 16737, 5411, 3435, 6052, 12825, 23332]\n\n\nDataSci4Chem.bar(measles,label=\"measles\")\n\nDataSci4Chem.bar!(mumps,label=\"mumps\")\n\nDataSci4Chem.bar!(chickenPox,label=\"chickenPox\")\n","category":"page"},{"location":"vis/","page":"Data visualization","title":"Data visualization","text":"In the figure above each series is plotted on top of the previous one, which may not be the most desirable setup. To solve this issue we need to use a more complete backend/version of Plots.jl, which is StatsPlots.jl. The StatsPlots.jl has been exported as \"sp\" within the DataSci4Chem.jl package to avoid any conflicts with other packages. It can be accessed using the following syntax. ","category":"page"},{"location":"vis/","page":"Data visualization","title":"Data visualization","text":"using DataSci4Chem\n\n\nDataSci4Chem.sp.bar(measles,label=\"measles\")\n\nDataSci4Chem.sp.bar!(mumps,label=\"mumps\")\n\nDataSci4Chem.sp.bar!(chickenPox,label=\"chickenPox\")\n","category":"page"},{"location":"vis/","page":"Data visualization","title":"Data visualization","text":"For this case we need to used the function groupedbar(-) to be able to have the bars being plotted side by side. The combination of groupedbar(-) and the attribute \"bar_position\" enables having the bars side by side. ","category":"page"},{"location":"vis/","page":"Data visualization","title":"Data visualization","text":"using DataSci4Chem\n\n\nDataSci4Chem.sp.groupedbar([measles mumps chickenPox], bar_position = :dodge)\n","category":"page"},{"location":"vis/","page":"Data visualization","title":"Data visualization","text":"A variant of bar plot is histogram, which is very useful for exploring the distribution of the variables in a dataset. Histograms can be used for a first step during the data visualization. For example, when looking at the \"Iris\" dataset, we can explore the distribution of each variable via histograms. To import the data we are taking advantage of RDatasets.jl package. ","category":"page"},{"location":"vis/","page":"Data visualization","title":"Data visualization","text":"using DataSci4Chem\n\ndata = DataSci4Chem.dataset(\"datasets\", \"iris\")     # Importing the data\nDataSci4Chem.describe(data)                         # Summarizes the dataset\n","category":"page"},{"location":"vis/","page":"Data visualization","title":"Data visualization","text":"Through the function describe(-) we can seen that the dataset contains five variables namely: sepal length, sepal width, petal length, petal width, and species. Now we can use histograms to explore the numerical variables. ","category":"page"},{"location":"vis/","page":"Data visualization","title":"Data visualization","text":"using DataSci4Chem\n\nDataSci4Chem.histogram(data[!,\"SepalLength\"])\n","category":"page"},{"location":"#Data-Analysis-and-Programming","page":"Home","title":"Data Analysis and Programming","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"The content of this page will be updated soon!!! ","category":"page"},{"location":"#Course-content","page":"Home","title":"Course content","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"This course is built for MSc of Analytical (Chemistry) Sciences at the University of Amsterdam (UvA). In this course, the students learn how to handle/model multi-dimensional data from simple visualization to machine learning based modeling and inference. The course contains 11 lectures from which 8 of them are tackling independent topics while the remaining are more generic. For 6 out of those 8, separate pages are created within this documentation. In future more topics will be added to the package and thus the documentation. This package utilizes wide range of other packages developed by others, as this is meant to facilitate the introduction of the students to programming and data science. The package is based on julia language. ","category":"page"},{"location":"","page":"Home","title":"Home","text":"Introduction to julia and Jupyter notebook\nSingular value decomposition (SVD)\nMCR-ALS\nPartial least square regression (PLS-R)\nHierarchical Cluster Analysis (HCA)\nK-means clustering \nDecision trees and random forest \nAdvanced signal processing \nValidation and cross-validation \nBayesian statistics I \nBayesian statistics II","category":"page"},{"location":"","page":"Home","title":"Home","text":"For more information about the course and us, please visit us at https://emcms.info. ","category":"page"}]
}
